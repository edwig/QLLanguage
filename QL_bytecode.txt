QL BYTECODE DEFINITIONS
=======================

<n>	  = 1 byte argument
<nn>  = 2 byte argument

OPCODE arg   DESCRIPTION
------------ ------------------------------------------------------------------------------
CALL   n     CALL A FUNCTION (SCRIPT, INTERNAL, EXTERNAL)
				     <n> is the position on the stack (before arguments) with the call definition
RETURN		   RETURN FROM A SCRIPT
LIT    n     LOAD LITERAL <n> ON TOS
NEW          TOS must be literal to class -> Convert to new object of this class
SEND   n     SEND event to an object (TOS[n] = object, TOS[n-1] = method-as-a-string)
LOAD   n	   REFERENCE A GLOBAL VARIABLE <n> is position for the variable, load on TOS
STORE  n	   SET GLOBAL VARIABLE VALUE   <n> is position for the variable, TOS is stored there
VLOAD        REFERENCE ARRAY OR STRING (TOS = index , TOS[1] = Array or string)
VSTORE       SET ARRAY OR STRING REF   (TOS = value,  TOS[1] = index, TOS[2] = string or array)
MLOAD  n     MEMBER REFERENCE   nth member is set on TOS
MSTORE n     SET MEMBER         nth member is filled from TOS
ALOAD  n     ARGUMENT REFERENCE nth argument is set on TOS
ASTORE n     SET ARGUMENT       nth argument is filled with TOS
TSPACE n     RESERVE SPACE FOR TEMPORARY VARIBLES <n> variables space on stack
TLOAD  n     REFERENCE A TEMPORARY VARIABLE <n> is position for the variable, load on TOS
TSTORE n     SET A TEMPORARY VARIABLE       <n> is position for the variable, TOS is stored there
BRT    nn    BRANCH IF TRUE  if TOS value is not zero, branch <nn> places in bytecode
BRF    nn    BRANCH IF FALSE if TOS value is     zero, branch <nn> places in bytecode
BR     nn    BRANCH UNCONDITIONALLY <nn> places in bytecode
NIL          TOS becomes NIL
PUSH         PUSH an integer of value 0 to TOS
NOT          LOGICAL NOT OF TOS (if integer)
NEG          NEGATE TOS (if integer)
ADD			     ADD		   TOP TWO (STRING's INTEGER's or BCD's)
SUB			     SUBTRACT  TOP TWO (STRING's INTEGER's or BCD's)
MUL          MULTIPLY  TOP TWO (STRING's INTEGER's or BCD's)
DIV			     DIVIDE    TOP TWO (STRING's INTEGER's or BCD's)
REM          REMAINDER TOP TWO (STRING's INTEGER's or BCD's)
INC          INCREMENT TOS (if integer or BCD)
DEC          DECREMENT TOS (if integer or BCD)
BAND         BITWISE AND TOP TWO integers on stack
BOR          BITWISE OR  TOP TWO integers on stack
XOR          BITWISE XOR TOP TWO integers on stack
BNOT         BITWISE NOT OF TOS integer
SHL			     SHIFT LEFT TOS places of TOS[1] integer
             Print to file TOS[1] of the value on TOS
SHR          SHIFT RIGHT TOS places of TOS[1] integer
LT           LESSER           ( <) for TOP TWO arugments (INTEGER / BCD)
LE           LESSER OR EQUAL  (<=) for TOP TWO arugments (INTEGER / BCD)
EQ           EQUAL            (==) for TOP TWO arugments (INTEGER / BCD)
NE           NOT EQUAL        (!=) for TOP TWO arugments (INTEGER / BCD)
GE           GREATER OR EQUAL (>=) for TOP TWO arugments (INTEGER / BCD)
GT           GREATER          ( >) for TOP TWO arugments (INTEGER / BCD)
DUP2         DUPLICATE TOP 2 of stack and push on stack
DESTROY      DESTROY by calling objects "destroy" method
DELETE       DELETE an object on TOS
SWITCH n     SWITCH TABLE <n> is the number of cases, TOS is switch variable
 <xx> <yy>   switch case <xx> is the literal, <yy> is the branch offset
 <xx> <yy>
 <..> <..>
 <qq>        the default case, <qq> is the branch offset

The working of a "POP n"
========================
Pop instructions are not generated and emitted by the compiler
Instead the interpeter inserts 'virtual' POP instructions where neccessary
E.g. after a function or object member call, or after calling an internal.
Also after various mathematical and logical functions, where two arguments are used.

Internal workings of the QL Bytecode
====================================

The bytecode format
------------------------------------
CODE n         Here is <n> the offset on the stack
               Where the call object resides
               it is also the number of arguments (256 possible)
CODE nn        Here <nn> is the bytecode jump offset
               Offsets can be conditional, depending on opcode

The frame pointer
---------------------------------------------------------------------------
frame_pointer[-n-1]  The nth local variable (reserved by OP_TSPACE)
frame_pointer[0]     Relative pc  (code program counter)
frame_pointer[1]     Relative fp  (frame pointer) calculated from stack-top
frame_pointer[2]     The number of arguments to the call
frame_pointer[3]     The current function pointer
frame_pointer[4]     The current running object
frame_pointer[4 + num-of-arguments - n]  The nth argument to the call

Technical constraints of the QL Interpreter
-------------------------------------------
256    Max arguments to a function call
256    Max local variables
256    Max literal strings and symbols in a function
32768  Max bytecode in a function call
256    Max members in an object
256    Max global variables
